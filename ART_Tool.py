#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Oct 05, 2021 01:08:23 AM CST  platform: Windows NT

import sys
import os
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import ART_Tool_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    ART_Tool_support.set_Tk_var()
    top = Toplevel1(root)
    ART_Tool_support.init(root, top)
    root.mainloop()

    return top.result


w = None


def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel(root)
    ART_Tool_support.set_Tk_var()
    top = Toplevel1(w)
    ART_Tool_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[
                       ('selected', _compcolor), ('active', _ana2color)])

        top.geometry("600x450+735+200")
        # top.geometry("900x450+735+200")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("ART Tool")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.083, rely=0.089,
                          relheight=0.833, relwidth=0.842)
        # self.Frame1.place(relx=0.05, rely=0.089,
        #                   relheight=0.833, relwidth=0.45)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.137, rely=0.133, height=21, width=75)
        # self.Label1.place(relx=0.08, rely=0.133, height=21, width=75)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''選擇目標模型''')

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.137, rely=0.293, height=21, width=75)
        # self.Label2.place(relx=0.08, rely=0.293, height=21, width=75)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''選擇攻擊模型''')

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.137, rely=0.453, height=21, width=75)
        # self.Label3.place(relx=0.08, rely=0.453, height=21, width=75)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''選擇攻擊方法''')

        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(relx=0.137, rely=0.613, height=21, width=124)
        # self.Label4.place(relx=0.08, rely=0.613, height=21, width=124)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''雜訊參數（eps/conf）''')

        self.TCombobox1 = ttk.Combobox(self.Frame1)
        self.TCombobox1.place(relx=0.35, rely=0.133,
                              relheight=0.056, relwidth=0.317)
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1['values'] = ['LeNet5', 'CNN',
                                     'AlexNet', 'GoogleNet', 'VGG19', 'ResNext101']
        self.TCombobox1.current(0)

        self.TCombobox2 = ttk.Combobox(self.Frame1)
        self.TCombobox2.place(relx=0.35, rely=0.293,
                              relheight=0.056, relwidth=0.317)
        self.TCombobox2.configure(takefocus="")
        self.TCombobox2['values'] = ['LeNet5', 'CNN',
                                     'AlexNet', 'GoogleNet', 'VGG19', 'ResNext101']
        self.TCombobox2.current(0)

        self.TCombobox3 = ttk.Combobox(self.Frame1)
        self.TCombobox3.place(relx=0.35, rely=0.453,
                              relheight=0.056, relwidth=0.317)
        self.TCombobox3.configure(takefocus="")
        self.TCombobox3['values'] = [
            'FGSM', 'BIM', 'PGD', 'C&W L2', 'C&W Linf']
        self.TCombobox3.current(0)

        self.TEntry1 = ttk.Entry(self.Frame1)
        self.TEntry1.place(relx=0.436, rely=0.613,
                           relheight=0.056, relwidth=0.23)
        self.TEntry1.configure(takefocus="")
        # self.TEntry1.configure(cursor="ibeam")
        self.TEntry1.insert(0, '0.5')

        self.result = []
        self.file_path = []

        def action_event():
            attact_para = [self.TCombobox1.get(), self.TCombobox2.get(
            ), self.TCombobox3.get(), self.TEntry1.get(), self.file_path]
            loss_info = ['目標模型', '攻擊模型', '攻擊方法', '雜訊參數']
            text = ''
            for i in range(0, 4):
                if str(attact_para[i]) == '':
                    text += loss_info[i]
                    if i < 3:
                        text += '、'
            # print(self.file_path)
            if (
                self.file_path == [] or
                not os.path.exists(self.file_path) or
                not os.path.exists(os.path.join(self.file_path, "./train/")) or
                not os.path.exists(os.path.join(self.file_path, "./test/"))
            ):
                if text != '':
                    text += '、'
                text += '資料集'

            if text != '':
                from tkinter import messagebox
                messagebox.showinfo("提示", text + " 資料輸入有誤！")
            else:
                self.result = attact_para
                root.destroy()

        def select_event():
            from tkinter import filedialog
            # filetypes = [('Image','.jpg'), ('Image','.png')]
            self.file_path = filedialog.askdirectory(
                parent=root, initialdir='./')
            self.TEntry2.insert(0, self.file_path)

        self.TButton1 = ttk.Button(self.Frame1, command=action_event)
        self.TButton1.place(relx=0.733, rely=0.747, height=25, width=87)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''執行''')

        self.TButton2 = ttk.Button(self.Frame1, command=select_event)
        self.TButton2.place(relx=0.139, rely=0.747, height=25, width=87)
        # self.TButton2.place(relx=0.08, rely=0.747, height=25, width=87)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''選擇資料集''')

        self.TEntry2 = ttk.Entry(self.Frame1)
        # self.TEntry2.place(relx=0.376, rely=0.747,
        #                    relheight=0.059, relwidth=0.289)
        self.TEntry2.place(relx=0.35, rely=0.747,
                           relheight=0.059, relwidth=0.289)
        self.TEntry2.configure(takefocus="")
        # self.TEntry2.configure(cursor="ibeam")

        ###############################################################
        """self.Frame2 = tk.Frame(top)
        # self.Frame1.place(relx=0.05, rely=0.089,
        #                   relheight=0.833, relwidth=0.45)
        self.Frame2.place(relx=0.53, rely=0.089,
                          relheight=0.833, relwidth=0.42)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")

        self.Label5 = tk.Label(self.Frame2)
        # self.Label1.place(relx=0.137, rely=0.133, height=21, width=75)
        self.Label5.place(relx=0.01, rely=0.01, height=25, width=100)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''實驗執行細節''')"""
        ################################################################


if __name__ == '__main__':
    result = vp_start_gui()
    print(result)
